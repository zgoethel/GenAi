@page "/"
@page "/{Bot}"
@rendermode InteractiveServer
@implements IDisposable
@attribute [Authorize]

@using GenAi.Backend
@using GenAi.Backend.ViewModels
@using GenAi.Web.Components.Chat
@using Microsoft.AspNetCore.Authorization

@inject HomeViewModel vm
@inject IJSRuntime js
@inject NavigationManager nav

<PageTitle>Home</PageTitle>

<div class="fixed-top-bar d-flex flex-row align-items-center gap-2 px-4 pb-3 pt-4">

    <h4 class="m-0">Chat with</h4>

    <select @bind="@Bot" @bind:after="@GoToBot" class="form-select">

        <option>@SD.Assistants.Generalbot</option>

        <option>@SD.Assistants.Salesbot</option>

    </select>

</div>

<div class="d-flex flex-column align-items-center">

    <div class="chat-log">

        @foreach (var item in vm.ChatLog)
        {
            <ChatMessage @key="@item" Vm="@item" />
        }

    </div>

</div>

@if (vm.WaitingForInput)
{

    <hr style="opacity: 0.5;" />
    
    @* Container added to enable CSS isolation *@
    <div>
        <EditForm autocomplete="off" Model="@_o"
            class="user-chat-form d-flex flex-row align-items-center"
            OnSubmit="@(async () =>
            {
                await vm.ProvideInput(userInput);
                userInput = "";
            })">

            <input type="text" id="userChatInput"
                class="form-control flex-grow-1 flex-shrink-1 shadow border-dark py-3"
                @bind="@userInput" @bind:event="oninput" />

            <button type="submit"
                class="btn btn-primary border-dark py-3"
                disabled="@string.IsNullOrEmpty(userInput)">
                
                Send
            
            </button>

        </EditForm>
    </div>

} else
{
    userInput = "";
}

@code {
    [Parameter]
    public string Bot { get; set; } = "Generalbot";

    private readonly CancellationTokenSource cancellationToken = new();
    private readonly object _o = new();

    private string userInput = "";
    private bool focusUserChatInput = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        vm.Changed += async () => await InvokeAsync(StateHasChanged);
        vm.ExpectingUserInput += async () =>
        {
            focusUserChatInput = true;
            await InvokeAsync(StateHasChanged);
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (focusUserChatInput)
        {
            focusUserChatInput = false;

            _ = Task.Run(async () =>
            {
                try
                {
                    await Task.Delay(200);
                    await js.InvokeVoidAsync("focusUserChatInput");
                } catch (Exception)
                {
                }
            });
        }

        if (!firstRender)
        {
            return;
        }
        try
        {
            await vm.BeginConversation(Bot, cancellationToken.Token);
        } catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    void IDisposable.Dispose()
    {
        cancellationToken.Cancel();
    }

    void GoToBot()
    {
        nav.NavigateTo(Bot, true);
    }
}