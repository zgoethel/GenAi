@page "/"
@rendermode InteractiveServer
@implements IDisposable
@attribute [Authorize]

@using GenAi.Backend.ViewModels
@using GenAi.Web.Components.Chat
@using Microsoft.AspNetCore.Authorization

@inject HomeViewModel vm
@inject IJSRuntime js

<PageTitle>Home</PageTitle>

<div class="fixed-top-bar px-4 pb-3 pt-4 bg-white border-bottom border-dark"
    style="position: fixed;top: 0;left: 0;width: 100%;z-index: 10;box-shadow: 0 0.5rem 2rem 0.5rem #e9e9e9;">

    <h4 class="m-0">Chat with Salesbot</h4>

</div>

<div class="d-flex flex-column align-items-center">

    <div class="chat-log"
        style="padding-top: 90px;width: 600px;max-width: 100%;">

        @foreach (var item in vm.ChatLog)
        {
            <ChatMessage @key="@item" Vm="@item" />
        }

    </div>

</div>

@if (vm.WaitingForInput)
{

    <hr style="opacity: 0.5;" />
    
    <EditForm autocomplete="off"
        Model="@_o"
        class="d-flex flex-row align-items-center gap-0"
        style="padding-bottom: 32px;margin-bottom: -20px;"
        OnSubmit="@(async () => await vm.ProvideInput(userInput))">

        <input type="text" id="userChatInput"
            class="form-control flex-grow-1 flex-shrink-1 shadow border-dark py-3"
            style="border-top-right-radius: 0;border-bottom-right-radius: 0;"
            @bind="@userInput" @bind:event="oninput" />

        <button type="submit"
            class="btn btn-primary border-dark py-3"
            style="border-top-left-radius: 0;border-bottom-left-radius: 0;border-left: 0;"
            disabled="@string.IsNullOrEmpty(userInput)">
                
            Send
            
        </button>

    </EditForm>

} else
{
    userInput = "";
}

@code {
    private readonly CancellationTokenSource cancellationToken = new();
    private readonly object _o = new();

    private string userInput = "";
    private bool focusUserChatInput = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        vm.Changed += async () => await InvokeAsync(StateHasChanged);
        vm.ExpectingUserInput += async () =>
        {
            focusUserChatInput = true;
            await InvokeAsync(StateHasChanged);
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (focusUserChatInput)
        {
            focusUserChatInput = false;

            await js.InvokeVoidAsync("focusUserChatInput");
        }

        if (!firstRender)
        {
            return;
        }
        try
        {
            await vm.BeginConversation(cancellationToken.Token);
        } catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    void IDisposable.Dispose()
    {
        cancellationToken.Cancel();
    }
}